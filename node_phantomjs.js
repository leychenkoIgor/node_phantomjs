// Generated by CoffeeScript 1.9.3
(function() {
  var child, fs, http, node_phantomjs, path, socketio,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  socketio = require('socket.io');

  child = require('child_process');

  path = require("path");

  fs = require("fs");

  node_phantomjs = (function() {
    var cCallback, server;

    server = void 0;

    cCallback = void 0;

    function node_phantomjs(options) {
      this.options = options != null ? options : {};
      this.evaluate = bind(this.evaluate, this);
      this.paperSize = bind(this.paperSize, this);
      this.open = bind(this.open, this);
      if (!this.options.phantomPath) {
        this.options.phantomPath = "phantomjs";
      }
      this.onError = void 0;
      this._paperSize = {};
    }

    node_phantomjs.prototype.create = function(callback) {
      return this.server = http.createServer(function(req, res) {
        res.writeHead(200, {
          "Content-Type": "text/html"
        });
        return res.end(fs.readFileSync(path.join(__dirname, 'controlpage.html')));
      }).listen((function(_this) {
        return function() {
          _this.io = socketio(_this.server);
          return _this.spawnPhantom(_this.server.address().port, function(err, phantom) {
            return _this.io.on('connection', function(socket) {
              socket.on("create", function() {
                return _this.cCallback();
              });
              socket.on("open", function(res) {
                return _this.cCallback(res.status);
              });
              socket.on("render", function() {
                return _this.cCallback();
              });
              socket.on("onCallback", function(res) {
                return pages[res.uuid]["class"].onCallback(res.data);
              });
              socket.on("onConsoleMessage", function(res) {
                return pages[res.uuid]["class"].onConsoleMessage(res.msg, res.lineNum, res.sourceId);
              });
              socket.on("evaluate", function(res) {
                return _this.cCallback(res);
              });
              socket.on("onError", function(res) {
                if (res.uuid === 0) {
                  if (_this.onError) {
                    return _this.onError(res);
                  }
                } else {
                  if (pages[res.uuid]["class"].onError) {
                    return pages[res.uuid]["class"].onError(res);
                  }
                }
              });
              _this.cCallback = callback;
              return _this.io.emit("cmd", {
                cmd: "create"
              });
            });
          });
        };
      })(this));
    };

    node_phantomjs.prototype.spawnPhantom = function(port, callback) {
      var args, phantom;
      args = [];
      args.push(path.join(__dirname, 'phantomjs.js'), port);
      phantom = child.spawn(this.options.phantomPath, args);
      phantom.stdout.on('data', function(data) {
        return console.log('phantom stdout: ' + data);
      });
      phantom.stderr.on('data', function(data) {
        return console.log('phantom stderrt: ' + data);
      });
      return callback(null, phantom);
    };

    node_phantomjs.prototype.open = function(url, viewportSize, callback) {
      if (typeof viewportSize === "function") {
        callback = viewportSize;
        viewportSize = void 0;
      }
      this.cCallback = callback;
      return this.io.emit("cmd", {
        cmd: "open",
        url: url,
        viewportSize: viewportSize
      });
    };

    node_phantomjs.prototype.paperSize = function(obj) {
      if (obj) {
        this._paperSize = obj;
        this.io.emit("cmd", {
          cmd: "paperSize",
          paperSize: obj
        });
      }
      return this._paperSize;
    };

    node_phantomjs.prototype.render = function(patchFile, option, callback) {
      if (typeof option === "function") {
        callback = option;
        option = void 0;
      }
      this.cCallback = callback;
      return this.io.emit("cmd", {
        cmd: "render",
        patchFile: patchFile,
        option: option
      });
    };

    node_phantomjs.prototype.stop = function() {
      this.io.emit("cmd", {
        cmd: "exit"
      });
      return this.server.close();
    };

    node_phantomjs.prototype.evaluate = function(vFunction, value, callback) {
      if (typeof value === "function") {
        callback = value;
        value = void 0;
      }
      this.cCallback = callback;
      return this.io.emit("cmd", {
        cmd: "evaluate",
        vFunction: vFunction.toString(),
        value: value
      });
    };

    return node_phantomjs;

  })();

  module.exports = node_phantomjs;

}).call(this);

//# sourceMappingURL=node_phantomjs.js.map
